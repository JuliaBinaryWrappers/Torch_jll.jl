# Autogenerated wrapper script for Torch_jll for x86_64-linux-gnu-cxx11
export libdoeye_caml, libtorch

using CompilerSupportLibraries_jll
## Global variables
PATH = ""
LIBPATH = ""
LIBPATH_env = "LD_LIBRARY_PATH"

# Relative path to `libdoeye_caml`
const libdoeye_caml_splitpath = ["lib", "libdoeye_caml.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libdoeye_caml_path = ""

# libdoeye_caml-specific global declaration
# This will be filled out by __init__()
libdoeye_caml_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libdoeye_caml = "libdoeye_caml.so"


# Relative path to `libtorch`
const libtorch_splitpath = ["lib", "libtorch.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libtorch_path = ""

# libtorch-specific global declaration
# This will be filled out by __init__()
libtorch_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libtorch = "libtorch.so"


"""
Open all libraries
"""
function __init__()
    global artifact_dir = abspath(artifact"Torch")

    # Initialize PATH and LIBPATH environment variable listings
    global PATH_list, LIBPATH_list
    # We first need to add to LIBPATH_list the libraries provided by Julia
    append!(LIBPATH_list, [joinpath(Sys.BINDIR, Base.LIBDIR, "julia"), joinpath(Sys.BINDIR, Base.LIBDIR)])
    # From the list of our dependencies, generate a tuple of all the PATH and LIBPATH lists,
    # then append them to our own.
    foreach(p -> append!(PATH_list, p), (CompilerSupportLibraries_jll.PATH_list,))
    foreach(p -> append!(LIBPATH_list, p), (CompilerSupportLibraries_jll.LIBPATH_list,))

    global libdoeye_caml_path = normpath(joinpath(artifact_dir, libdoeye_caml_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libdoeye_caml_handle = dlopen(libdoeye_caml_path)
    push!(LIBPATH_list, dirname(libdoeye_caml_path))

    global libtorch_path = normpath(joinpath(artifact_dir, libtorch_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libtorch_handle = dlopen(libtorch_path)
    push!(LIBPATH_list, dirname(libtorch_path))

    # Filter out duplicate and empty entries in our PATH and LIBPATH entries
    filter!(!isempty, unique!(PATH_list))
    filter!(!isempty, unique!(LIBPATH_list))
    global PATH = join(PATH_list, ':')
    global LIBPATH = join(LIBPATH_list, ':')

    # Add each element of LIBPATH to our DL_LOAD_PATH (necessary on platforms
    # that don't honor our "already opened" trick)
    #for lp in LIBPATH_list
    #    push!(DL_LOAD_PATH, lp)
    #end
end  # __init__()

